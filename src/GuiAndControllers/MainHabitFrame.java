package GuiAndControllers;

/**
 * modify habits frame and controllers add, delete, update, active, checkDate,
 * share to Twitter, ranking list
 *
 * @author dan
 */
import Habit_API.TwitterApapter;
import Translators.TwitterUserApapter;
import Habit_API.TwitterInterface;
import Model.Habit;
import Model.ModeTranslators;
import Model.TwitterUserInfo;
import Translators.DateListHabits;
import Translators.HabitsApapter;
import Translators.HabitsInterface;
import javax.swing.JOptionPane;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.auth.AccessToken;
import Translators.TwitterUserInterface;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class MainHabitFrame extends javax.swing.JFrame {

    public int defualtsZero = 0;
    public int defualtsOne = 1;
    public int defualtsTwo = 2;

    //the table column information
    public int tableSteakday = 3;
    public int tableMaxDay = 6;
    public int tableActive = 5;
    public int maxActiveHabits = 3;

    public static Habit habit;
    private List<Habit> list;
    private String[] columnTitle = {"id", "HabitTitle", "Description", "StreakDays", "StreakTime", "Active", "MaxStreakDays"};

    // call the habits apapter
    HabitsInterface habits = new HabitsApapter();

    /**
     * Creates new form gui_MainHabit
     */
    public MainHabitFrame() {
        initComponents();
        this.jlb_date.setText("Today: " + showDate());
        //call quaryAll to show the habits information at table
        quaryAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtable_Habits = new javax.swing.JTable();
        jtx_ShareTwitter = new javax.swing.JTextField();
        jbt_ShareTwitter = new javax.swing.JButton();
        jbt_Ranking = new javax.swing.JButton();
        jbt_Date = new javax.swing.JButton();
        jlb_date = new javax.swing.JLabel();
        jbt_AddHabit = new javax.swing.JButton();
        jbt_UpdateHabit = new javax.swing.JButton();
        jbt_ActiveHabit = new javax.swing.JButton();
        jbt_deleteHabit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(134, 226, 213));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Habits Traininng");

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jtable_Habits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Title", "Description", "Streak Days", "Streak Time", "Active", "Streak Max Days"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtable_Habits.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jtable_Habits);
        jtable_Habits.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jtx_ShareTwitter.setBackground(new java.awt.Color(134, 226, 213));
        jtx_ShareTwitter.setText("Share My expirence");
        jtx_ShareTwitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtx_ShareTwitterActionPerformed(evt);
            }
        });

        jbt_ShareTwitter.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbt_ShareTwitter.setText("Share To Twitter");
        jbt_ShareTwitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_ShareTwitterActionPerformed(evt);
            }
        });

        jbt_Ranking.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbt_Ranking.setText("STREAK DAYS RANKINGS");
        jbt_Ranking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_RankingActionPerformed(evt);
            }
        });

        jbt_Date.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbt_Date.setText("SignIn Today");
        jbt_Date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_DateActionPerformed(evt);
            }
        });

        jlb_date.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jlb_date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtx_ShareTwitter)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jbt_Ranking)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlb_date, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jbt_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbt_ShareTwitter)
                .addGap(73, 73, 73))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 735, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jbt_Ranking, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbt_Date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlb_date, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jtx_ShareTwitter, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbt_ShareTwitter)
                .addGap(34, 34, 34))
        );

        jbt_AddHabit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbt_AddHabit.setText("ADD NEW");
        jbt_AddHabit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_AddHabitActionPerformed(evt);
            }
        });

        jbt_UpdateHabit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jbt_UpdateHabit.setText("Modify Habit");
        jbt_UpdateHabit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_UpdateHabitActionPerformed(evt);
            }
        });

        jbt_ActiveHabit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbt_ActiveHabit.setText("Active");
        jbt_ActiveHabit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_ActiveHabitActionPerformed(evt);
            }
        });

        jbt_deleteHabit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jbt_deleteHabit.setText("Delete");
        jbt_deleteHabit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbt_deleteHabitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jbt_AddHabit, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbt_deleteHabit, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addComponent(jbt_UpdateHabit, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jbt_ActiveHabit, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbt_deleteHabit, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbt_UpdateHabit)
                        .addComponent(jbt_ActiveHabit)
                        .addComponent(jbt_AddHabit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * open the rankinglist frame
     *
     * @param evt
     */
    private void jbt_RankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_RankingActionPerformed

        new RankingListFrame().setVisible(true);
        dispose();
    }//GEN-LAST:event_jbt_RankingActionPerformed

    private void jtx_ShareTwitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtx_ShareTwitterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtx_ShareTwitterActionPerformed
    /**
     * *
     * get twitter access token and inset or upload new accessToken
     *
     * @param evt
     */
    private void jbt_ShareTwitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_ShareTwitterActionPerformed

        //call the apapter
        TwitterUserInterface twitterUser = new TwitterUserApapter();
        TwitterInterface twitterConnect = new TwitterApapter();

        // get twitter access
        AccessToken accessToken = twitterConnect.getAccessToken();
        if (accessToken == null) {
            JOptionPane.showMessageDialog(null, "Try again", "Error", JOptionPane.WARNING_MESSAGE);
        } else {

            //search in user's database, if user is exist or not
            TwitterUserInfo user = twitterUser.selectTwitterUser((int) accessToken.getUserId());
            if (user == null) {

                //insert new twitter user
                System.out.println("user == null");
                TwitterUserInfo u = new TwitterUserInfo();
                u.setTwitter_user_id((int) accessToken.getUserId());
                u.setTwitter_screen_name(accessToken.getScreenName());
                u.setAccess_token(accessToken.getToken());
                u.setAccess_token_secret(accessToken.getTokenSecret());
                boolean insert = twitterUser.insertTwitterUser(u);
                if (insert == true) {
                    System.out.println("insert new twitter account success");
                } else {
                    System.out.println("insert new twitter account falid");
                }

            } else {
                // if user already in database, update access token
                user.setAccess_token(accessToken.getToken());
                user.setAccess_token_secret(accessToken.getTokenSecret());
                twitterUser.updateAccessToken(user);

            }

            //post to twitter
            try {
                Twitter twitter = twitterConnect.connectTwitter();
                twitter.setOAuthAccessToken(accessToken);
                String experience = "Habits Training: ";
                twitter.updateStatus(experience + this.jtx_ShareTwitter.getText()); // infomation to post 
                JOptionPane.showMessageDialog(null, "Post success!");
                //System.out.println("Successfully updated the status in Twitter.");
            } catch (TwitterException te) {
                JOptionPane.showMessageDialog(null, "Try again", "Error", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbt_ShareTwitterActionPerformed

    /**
     * open modify habit frame to add
     *
     * @param evt
     */
    private void jbt_AddHabitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_AddHabitActionPerformed
        new ModifyHabitFrame().setVisible(true);
        dispose();

    }//GEN-LAST:event_jbt_AddHabitActionPerformed

    /**
     * update habit, set habit information at modify habit frame
     *
     * @param evt
     */
    private void jbt_UpdateHabitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_UpdateHabitActionPerformed
        try {
            int i = this.jtable_Habits.getSelectedRow();
            int key = Integer.valueOf(this.jtable_Habits.getValueAt(i, this.defualtsZero).toString());
            // save the selected habit information at object habit
            for (int k = this.defualtsZero; k < this.list.size(); k++) {
                if (this.list.get(k).getId() == key) {
                    habit = this.list.get(k);
                }
            }
            //set habit information at modify habit frame 
            ModifyHabitFrame.rowId = key;

            new ModifyHabitFrame().setVisible(true);
            dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please selected the habit");

        }


    }//GEN-LAST:event_jbt_UpdateHabitActionPerformed

    private void jbt_ActiveHabitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_ActiveHabitActionPerformed
        // TODO add your handling code here:
        active();
        quaryAll();
    }//GEN-LAST:event_jbt_ActiveHabitActionPerformed

    private void jbt_deleteHabitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_deleteHabitActionPerformed
        // TODO add your handling code here:
        delete();
        quaryAll();
    }//GEN-LAST:event_jbt_deleteHabitActionPerformed

    /**
     * controller the Sign In today button check date and update the habit
     * information at table
     *
     * @param evt
     */
    private void jbt_DateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbt_DateActionPerformed
        // TODO add your handling code here:
        checkToday();
        quaryAll();
    }//GEN-LAST:event_jbt_DateActionPerformed

    /**
     * show the date at label
     *
     * @return
     */
    public String showDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
        String strdate = sdf.format(new Date());
        return strdate;
    }

    /**
     * active the habit
     */
    private void active() {
        String activeFlag = "Active";
        // handle th habit which is selected
        int i = this.jtable_Habits.getSelectedRow();
        int key = Integer.valueOf(this.jtable_Habits.getValueAt(i, this.defualtsZero).toString());
        String name = ModeTranslators.user.getUsername();
        //get the habits are active
        List<Habit> list = habits.getActiveHabits(name, activeFlag);
        if (list.size() >= maxActiveHabits) {
            JOptionPane.showMessageDialog(null, "active fail! \n active Habits is more than 3 !");
            return;
        }
        //active the habit
        boolean active = habits.activeHabit(key);
        if (active) {
            JOptionPane.showMessageDialog(null, "active success!");
            return;
        } else {
            JOptionPane.showMessageDialog(null, "active fail!");
        }
        quaryAll();
    }

    /**
     * get user's habits
     */
    public void quaryAll() {
        // get the login user
        String name = ModeTranslators.user.getUsername();
        list = habits.getAll(name);
        if (list == null) {
            JOptionPane.showMessageDialog(null, "system error！");
            return;
        }
        //save the habits
        Object[][] data = DateListHabits.listToArray(list);

        //build new table model which cannot edit
        DefaultTableModel tableModel = new DefaultTableModel(data, this.columnTitle) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        this.jtable_Habits.setModel(tableModel);

    }

    /**
     * delete the habit
     */
    private void delete() {
        //handle the habit which is selected
        int i = this.jtable_Habits.getSelectedRow();
        int key = Integer.valueOf(this.jtable_Habits.getValueAt(i, this.defualtsZero).toString());
        //delete the habit
        boolean remove = habits.deleteHabit(key);
        if (remove) {
            JOptionPane.showMessageDialog(null, "delete success!");
            return;
        } else {
            JOptionPane.showMessageDialog(null, "delete fail!");
        }
        quaryAll();
    }

    /**
     * check today date
     */
    private void checkToday() {
        //handle the habit which is selected
        int i = this.jtable_Habits.getSelectedRow();
        int key = Integer.valueOf(this.jtable_Habits.getValueAt(i, this.defualtsZero).toString());
        int days = Integer.valueOf(this.jtable_Habits.getValueAt(i, this.tableSteakday).toString());
        int Maxdays = Integer.valueOf(this.jtable_Habits.getValueAt(i, this.tableMaxDay).toString());
        // get the habit info
        Habit checkHabit = habits.getHabit(key);
        Date streakTime = new java.util.Date(checkHabit.getStreakTime().getTime());
        //make sure this habit is active
        String active = this.jtable_Habits.getValueAt(i, this.tableActive).toString();
        if (!active.equals("Active")) {
            JOptionPane.showMessageDialog(null, "This habit is not Active!");
        } else {
            //get the streak day info
            String day = handleDate(streakTime);
            SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
            String now = sdf.format(new Date());
            String time = sdf.format(streakTime);

            // if yesterday not check
            if (day.equals(String.valueOf(this.defualtsZero))) {
                //make everyday only can check onece
                if (now.equals(time) && checkHabit.getFlag().equals(String.valueOf(this.defualtsOne))) {
                    JOptionPane.showMessageDialog(null, "Today,you have keep on \n Do not try again!");
                    return;
                } else {
                    //check in today
                    int new_days = this.defualtsZero;
                    new_days = checkHabit.getStreakDays() + this.defualtsOne;
                    boolean rs = habits.updateHabitDays(new_days, key, new java.sql.Date(System.currentTimeMillis()));
                    if (key > this.defualtsZero && rs) {
                        JOptionPane.showMessageDialog(null, "keep on success!");
                    } else {
                        JOptionPane.showMessageDialog(null, "please choose a habit row!");
                    }
                    //define max streak days
                    if (new_days > Maxdays) {
                        Maxdays = new_days;
                        habits.updateMaxHabitDays(Maxdays, key);
                    }
                }
            }

            //if yesterday is checked
            if (day.equals(String.valueOf(this.defualtsOne))) {
                //calculate the new streak day
                int new_days = days + this.defualtsOne;
                boolean rs = habits.updateHabitDays(new_days, key, new java.sql.Date(System.currentTimeMillis()));
                //check today
                if (key > this.defualtsZero && rs) {
                    JOptionPane.showMessageDialog(null, "keep on success!");
                } else {
                    JOptionPane.showMessageDialog(null, "please choose a habit row!");
                }
                //define max streak days
                if (new_days > Maxdays) {
                    Maxdays = new_days;
                    habits.updateMaxHabitDays(Maxdays, key);
                }
            } else if (day.equals(String.valueOf(this.defualtsTwo))) {// habit is checked two days
                if (now.equals(time)) {
                    JOptionPane.showMessageDialog(null, "Today,you have keep on \n Do not try again!");
                    return;
                } else {
                    //check today
                    int new_days = this.defualtsOne;
                    boolean rs = habits.updateHabitDays(new_days, key, new java.sql.Date(System.currentTimeMillis()));
                    if (key > this.defualtsZero && rs) {
                        JOptionPane.showMessageDialog(null, "keep on success!");
                    } else {
                        JOptionPane.showMessageDialog(null, "please choose a habit row!");
                    }
                }
            }

        }
    }

    /**
     * handle the date were checked
     *
     * @param time
     * @return
     */
    private static String handleDate(Date time) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM-dd-yyyy");
        Date old = null;
        Date now = null;
        try {
            old = simpleDateFormat.parse(simpleDateFormat.format(time));
            now = simpleDateFormat.parse(simpleDateFormat.format(new Date()));
        } catch (Exception e) {
            System.out.println("handleDate() have error.");
        }
        long oldTime = old.getTime();
        long nowTime = now.getTime();
        // calculates the timestamp
        long day = (nowTime - oldTime) / (24 * 60 * 60 * 1000);

        if (day < 1) {
            return "0";
        } else if (day == 1) {//yesterday
            return "1";
        } else {    // the day betfore the yesterday
            return "2";
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainHabitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainHabitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainHabitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainHabitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainHabitFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbt_ActiveHabit;
    private javax.swing.JButton jbt_AddHabit;
    private javax.swing.JButton jbt_Date;
    private javax.swing.JButton jbt_Ranking;
    private javax.swing.JButton jbt_ShareTwitter;
    private javax.swing.JButton jbt_UpdateHabit;
    private javax.swing.JButton jbt_deleteHabit;
    private javax.swing.JLabel jlb_date;
    private javax.swing.JTable jtable_Habits;
    private javax.swing.JTextField jtx_ShareTwitter;
    // End of variables declaration//GEN-END:variables
}
